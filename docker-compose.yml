version: '3'

## SERVICES

services:
  discovery-server:
    image: saadahmedscse/vendor-voyage-discovery-server:latest
    ports:
      - "8761:8761"
    networks:
      - v9pre

  api-gateway:
    image: saadahmedscse/vendor-voyage-api-gateway:latest
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server
      - auth-service
#      - product-service
#      - cart-service
#      - inventory-service
#      - order-service
#      - payment-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
    networks:
      - v9pre

  auth-service:
    image: saadahmedscse/vendor-voyage-auth-service:latest
    ports:
      - "8081:8081"
    depends_on:
      - discovery-server
      - user-database
    restart: always
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
      SPRING_DATASOURCE_URL: jdbc:mysql://user-database:3306/user_service
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: vampire
    networks:
      - v9pre

#  cart-service:
#    image: saadahmedscse/vendor-voyage-cart-service:latest
#    ports:
#      - "8082:8082"
#    depends_on:
#      - discovery-server
#      - cart-database
#    restart: always
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
#      SPRING_DATASOURCE_URL: jdbc:mysql://cart-database:3306/cart_service
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: vampire
#    networks:
#      - v9pre
#
#  inventory-service:
#    image: saadahmedscse/vendor-voyage-inventory-service:latest
#    ports:
#      - "8083:8083"
#    depends_on:
#      - discovery-server
#      - inventory-database
#    restart: always
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
#      SPRING_DATASOURCE_URL: jdbc:mysql://inventory-database:3306/inventory_service
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: vampire
#    networks:
#      - v9pre
#
#  product-service:
#    image: saadahmedscse/vendor-voyage-product-service:latest
#    ports:
#      - "8084:8084"
#    depends_on:
#      - discovery-server
#      - product-database
#    restart: always
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
#      SPRING_DATASOURCE_URL: jdbc:mysql://product-database:3306/product_service
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: vampire
#    volumes:
#      - ./data/product/media/images:/product/media/images
#    networks:
#      - v9pre

  zookeeper:
    container_name: "zookeeper"
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - v9pre
  kafka:
    container_name: "kafka"
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    networks:
      - v9pre

#  order-service:
#    image: saadahmedscse/vendor-voyage-order-service:latest
#    ports:
#      - "8085:8085"
#    depends_on:
#      - discovery-server
#      - order-database
#      - kafka
#    restart: always
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
#      SPRING_DATASOURCE_URL: jdbc:mysql://order-database:3306/order_service
#      SPRING_DATASOURCE_USERNAME: root
#      SPRING_DATASOURCE_PASSWORD: vampire
#    networks:
#      - v9pre
#
#  payment-service:
#    image: saadahmedscse/vendor-voyage-payment-service:latest
#    ports:
#      - "8086:8086"
#    depends_on:
#      - discovery-server
#      - kafka
#    restart: always
#    environment:
#      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka
#    networks:
#      - v9pre

  ## DATABASES
  user-database:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: vampire
      MYSQL_DATABASE: user_service
    ports:
      - "3307:3306"
    networks:
      - v9pre

#  inventory-database:
#    image: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: vampire
#      MYSQL_DATABASE: inventory_service
#    ports:
#      - "3308:3306"
#    networks:
#      - v9pre
#
  product-database:
    image: mysql
    environment:
      MYSQL_ROOT_PASSWORD: vampire
      MYSQL_DATABASE: product_service
    ports:
      - "3309:3306"
    networks:
      - v9pre
#
#  order-database:
#    image: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: vampire
#      MYSQL_DATABASE: order_service
#    ports:
#      - "3310:3306"
#    networks:
#      - v9pre
#
#  cart-database:
#    image: mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: vampire
#      MYSQL_DATABASE: cart_service
#
#    ports:
#      - "3311:3306"
#    networks:
#      - v9pre

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.16
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
    healthcheck:
      test: "curl -f http://localhost:9200 || exit 1"

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.16
    container_name: logstash
    restart: unless-stopped
    ports:
      - "5044:5044"
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline/
    depends_on:
      - elasticsearch
    healthcheck:
      test: "curl -f http://localhost:9600 || exit 1"

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.16
    container_name: kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    healthcheck:
      test: "curl -f http://localhost:5601 || exit 1"

#  filebeat:
#    build: filebeat
#    container_name: filebeat
#    restart: unless-stopped
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /var/lib/docker/containers:/usr/share/dockerlogs/data:ro
#    depends_on:
#      - elasticsearch
#      - logstash

  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]

  grafana:
    image: grafana/grafana:9.5.15
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]


networks:
  v9pre:
    driver: bridge